/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRouteArgs } from "./CreateRouteArgs";
import { UpdateRouteArgs } from "./UpdateRouteArgs";
import { DeleteRouteArgs } from "./DeleteRouteArgs";
import { RouteFindManyArgs } from "./RouteFindManyArgs";
import { RouteFindUniqueArgs } from "./RouteFindUniqueArgs";
import { Route } from "./Route";
import { ManifestFindManyArgs } from "../../manifest/base/ManifestFindManyArgs";
import { Manifest } from "../../manifest/base/Manifest";
import { RouteService } from "../route.service";

@graphql.Resolver(() => Route)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RouteResolverBase {
  constructor(
    protected readonly service: RouteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "read",
    possession: "any",
  })
  async _routesMeta(
    @graphql.Args() args: RouteFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Route])
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "read",
    possession: "any",
  })
  async routes(@graphql.Args() args: RouteFindManyArgs): Promise<Route[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Route, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "read",
    possession: "own",
  })
  async route(
    @graphql.Args() args: RouteFindUniqueArgs
  ): Promise<Route | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Route)
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "create",
    possession: "any",
  })
  async createRoute(@graphql.Args() args: CreateRouteArgs): Promise<Route> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Route)
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "update",
    possession: "any",
  })
  async updateRoute(
    @graphql.Args() args: UpdateRouteArgs
  ): Promise<Route | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Route)
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "delete",
    possession: "any",
  })
  async deleteRoute(
    @graphql.Args() args: DeleteRouteArgs
  ): Promise<Route | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Manifest])
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "read",
    possession: "any",
  })
  async manifests(
    @graphql.Parent() parent: Route,
    @graphql.Args() args: ManifestFindManyArgs
  ): Promise<Manifest[]> {
    const results = await this.service.findManifests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
