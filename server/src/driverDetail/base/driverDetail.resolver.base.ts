/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDriverDetailArgs } from "./CreateDriverDetailArgs";
import { UpdateDriverDetailArgs } from "./UpdateDriverDetailArgs";
import { DeleteDriverDetailArgs } from "./DeleteDriverDetailArgs";
import { DriverDetailFindManyArgs } from "./DriverDetailFindManyArgs";
import { DriverDetailFindUniqueArgs } from "./DriverDetailFindUniqueArgs";
import { DriverDetail } from "./DriverDetail";
import { User } from "../../user/base/User";
import { DriverDetailService } from "../driverDetail.service";

@graphql.Resolver(() => DriverDetail)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DriverDetailResolverBase {
  constructor(
    protected readonly service: DriverDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DriverDetail",
    action: "read",
    possession: "any",
  })
  async _driverDetailsMeta(
    @graphql.Args() args: DriverDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DriverDetail])
  @nestAccessControl.UseRoles({
    resource: "DriverDetail",
    action: "read",
    possession: "any",
  })
  async driverDetails(
    @graphql.Args() args: DriverDetailFindManyArgs
  ): Promise<DriverDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DriverDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DriverDetail",
    action: "read",
    possession: "own",
  })
  async driverDetail(
    @graphql.Args() args: DriverDetailFindUniqueArgs
  ): Promise<DriverDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DriverDetail)
  @nestAccessControl.UseRoles({
    resource: "DriverDetail",
    action: "create",
    possession: "any",
  })
  async createDriverDetail(
    @graphql.Args() args: CreateDriverDetailArgs
  ): Promise<DriverDetail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DriverDetail)
  @nestAccessControl.UseRoles({
    resource: "DriverDetail",
    action: "update",
    possession: "any",
  })
  async updateDriverDetail(
    @graphql.Args() args: UpdateDriverDetailArgs
  ): Promise<DriverDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DriverDetail)
  @nestAccessControl.UseRoles({
    resource: "DriverDetail",
    action: "delete",
    possession: "any",
  })
  async deleteDriverDetail(
    @graphql.Args() args: DeleteDriverDetailArgs
  ): Promise<DriverDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: DriverDetail): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
