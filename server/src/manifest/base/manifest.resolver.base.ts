/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateManifestArgs } from "./CreateManifestArgs";
import { UpdateManifestArgs } from "./UpdateManifestArgs";
import { DeleteManifestArgs } from "./DeleteManifestArgs";
import { ManifestFindManyArgs } from "./ManifestFindManyArgs";
import { ManifestFindUniqueArgs } from "./ManifestFindUniqueArgs";
import { Manifest } from "./Manifest";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { User } from "../../user/base/User";
import { Route } from "../../route/base/Route";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { ManifestService } from "../manifest.service";

@graphql.Resolver(() => Manifest)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ManifestResolverBase {
  constructor(
    protected readonly service: ManifestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "read",
    possession: "any",
  })
  async _manifestsMeta(
    @graphql.Args() args: ManifestFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Manifest])
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "read",
    possession: "any",
  })
  async manifests(
    @graphql.Args() args: ManifestFindManyArgs
  ): Promise<Manifest[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Manifest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "read",
    possession: "own",
  })
  async manifest(
    @graphql.Args() args: ManifestFindUniqueArgs
  ): Promise<Manifest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Manifest)
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "create",
    possession: "any",
  })
  async createManifest(
    @graphql.Args() args: CreateManifestArgs
  ): Promise<Manifest> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        driver: {
          connect: args.data.driver,
        },

        route: {
          connect: args.data.route,
        },

        vehicle: {
          connect: args.data.vehicle,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Manifest)
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "update",
    possession: "any",
  })
  async updateManifest(
    @graphql.Args() args: UpdateManifestArgs
  ): Promise<Manifest | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          driver: {
            connect: args.data.driver,
          },

          route: {
            connect: args.data.route,
          },

          vehicle: {
            connect: args.data.vehicle,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Manifest)
  @nestAccessControl.UseRoles({
    resource: "Manifest",
    action: "delete",
    possession: "any",
  })
  async deleteManifest(
    @graphql.Args() args: DeleteManifestArgs
  ): Promise<Manifest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Ticket])
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async ticket(
    @graphql.Parent() parent: Manifest,
    @graphql.Args() args: TicketFindManyArgs
  ): Promise<Ticket[]> {
    const results = await this.service.findTicket(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async driver(@graphql.Parent() parent: Manifest): Promise<User | null> {
    const result = await this.service.getDriver(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Route, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "read",
    possession: "any",
  })
  async route(@graphql.Parent() parent: Manifest): Promise<Route | null> {
    const result = await this.service.getRoute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async vehicle(@graphql.Parent() parent: Manifest): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}